plugins {
    id 'java'
    id 'pmd'
    id 'checkstyle'
}

group = 'epam.gavura.learn'
version = '1.0-SNAPSHOT'
description = 'Epam learn test automation framework'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    lombokVersion = '1.18.30'
    slf4jVersion = '1.7.36'
    logbackClassicVersion = '1.4.11'
    assertjCoreVersion = '3.24.2'
    jacksonVersion = '2.15.2'
    loggerJavaLogbackVersion = '5.1.6'
    commonCodecVersion = '1.16.0'
    seleniumJavaVersion = '4.15.0'
    cucumberVersion = '7.14.0'
    agentJavaCucumberVersion = '5.2.0'
    agentJavaJUnit5Version = '5.1.10'
    junitPlatformSuite = '1.10.0'
    cucumberJunitPlatformEngine = '7.13.0'
    junitJupiterApi = '5.9.2'
    cucumberGuiceVersion = '7.14.0'
    guiceVersion = '7.0.0'
    restAssuredVersion = '5.3.2'
    loggerJavaRestAssuredVersion = '5.2.4'
    webdrivermanagerVersion = '5.6.2'
    selenuimJupiterVersion = '5.0.0'
}

dependencies {
    implementation "io.cucumber:cucumber-java:$cucumberVersion"
    testImplementation "io.cucumber:cucumber-java:$cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:$cucumberJunitPlatformEngine"
    testImplementation "io.cucumber:cucumber-guice:$cucumberGuiceVersion"
    testImplementation "org.junit.platform:junit-platform-suite:$junitPlatformSuite"
    testImplementation "org.junit.platform:junit-platform-suite-engine:$junitPlatformSuite"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterApi"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitJupiterApi"
    implementation "org.projectlombok:lombok:$lombokVersion"
    testImplementation "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    implementation "com.epam.reportportal:agent-java-junit5:$agentJavaJUnit5Version"
    implementation "com.epam.reportportal:agent-java-cucumber6:$agentJavaCucumberVersion"
    implementation "com.epam.reportportal:logger-java-logback:$loggerJavaLogbackVersion"
    implementation "com.epam.reportportal:logger-java-rest-assured:$loggerJavaRestAssuredVersion"
    implementation "commons-codec:commons-codec:$commonCodecVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "io.github.bonigarcia:webdrivermanager:$webdrivermanagerVersion"
    implementation "io.github.bonigarcia:selenium-jupiter:$selenuimJupiterVersion"
    implementation "org.seleniumhq.selenium:selenium-java:$seleniumJavaVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    testImplementation "org.assertj:assertj-core:$assertjCoreVersion"
    testImplementation "com.google.inject:guice:$guiceVersion"
    implementation "io.rest-assured:rest-assured:$restAssuredVersion"
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.getRequired().set(false)
        html.getRequired().set(true)
    }
}

tasks.withType(Pmd).configureEach {
    reports {
        xml.getRequired().set(false)
        html.getRequired().set(true)
    }
}

checkstyle {
    toolVersion '10.12.5'
    configFile file("src/main/resources/analyzers/checkstyle.xml")
}

pmd {
    threads = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    toolVersion = '6.55.0'
    ignoreFailures = false
    ruleSets = []
    ruleSetFiles = files("src/main/resources/analyzers/pmdrules.xml")
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.properties
    setRPProperties()
    testLogging {
        events 'PASSED', 'SKIPPED', 'FAILED'
        exceptionFormat "full"
    }
    if (System.getProperty("groups") == "uiSmoke") {
        useJUnitPlatform()
        filter {
            includeTestsMatching '*CucumberUITestRunner*'
        }
    } else {
        useJUnitPlatform() {
            includeTags 'apiSmoke'
        }
        filter {
            excludeTestsMatching '*CucumberUITestRunner*'
        }
    }
}

def setRPProperties() {
    def groups = System.getProperty('groups', 'apiSmoke')
    def baseUrl = System.getProperty('baseUrl', '')
    def userToken = System.getProperty('userToken', '')
    def projectName = System.getProperty('projectName', '')
    def properties = new Properties()
    def filePath = "src/main/resources/reportportal.properties"
    file(filePath).withInputStream { value -> properties.load(value) }
    def launchName = String.format("%s_reports", groups)
    properties.setProperty("rp.enable", "true")
    properties.setProperty("rp.launch", launchName)
    properties.setProperty("rp.api.key", userToken)
    properties.setProperty("rp.endpoint", baseUrl)
    properties.setProperty("rp.project", projectName)
    file(filePath).withWriter { properties.store(it, null) }
}

checkstyleMain.dependsOn(classes)
checkstyleTest.dependsOn(checkstyleMain)
pmdMain.dependsOn(checkstyleTest)
pmdTest.dependsOn(pmdMain)
test.dependsOn(pmdMain, pmdTest, checkstyleMain, checkstyleTest)
